# -*- coding: utf-8 -*-
"""css4p01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R4YBq98-cvWrloCpo9Cq7sjBxOY0wNOu
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

movie_dataset = pd.read_csv("/content/movie_dataset.csv")
movie_dataset

movie_dataset.info()

#Changing the date column to a datetime format.

#movie_dataset['Year'] = pd.to_datetime(movie_dataset['Year'].dt.year)
#movie_dataset['Year']

#Column space trimming

movie_dataset.columns

"""#1. Working with Columns containing numerical values"""

#Extracting the Revenue Column
movie_dataset['Revenue (Millions)']

#Finding the average revenue
avg_revenue = movie_dataset['Revenue (Millions)'].mean()
print("The average revenue is ", avg_revenue)

#Filling the NaN values with the mean rather than deleting them.
movie_dataset['Revenue (Millions)'].fillna(avg_revenue, inplace = True)
movie_dataset.info()

movie_dataset.info()
#Now notice that Revenue has 1000 non-null values

#Now working with the Metascore column
metascore = movie_dataset['Metascore']
avg_metascore = metascore.mean()
print("The average metascore is ", avg_metascore)

metascore.fillna(avg_metascore, inplace = True)

avg_metascore = movie_dataset['Metascore']
#avg_metascore.info()
movie_dataset.info()

#Now notice that the Metascore column does not have any Null values.

#sns.pairplot(movie_dataset)

movie_dataset["Year"] = pd.to_datetime(movie_dataset['Year'])
movie_dataset.info()

numerical_columns = movie_dataset.select_dtypes(include=["int64", "float64"]).columns
correlation_matrix = movie_dataset[numerical_columns].corr()

plt.figure(figsize=(12, 9))
sns.heatmap(correlation_matrix, annot=True, linewidths=.5, cmap="PiYG")
plt.title("Correlation of Numerical Features")
plt.show()

"""#2. Working with column with string(object) values
We can separate the genres and then group the movies by those genres. First we have to create separate classes(columns) for each movie that falls in more than one genre.
"""

#Extracting the genre column
genre = movie_dataset['Genre']
genre

#Splitting all the genres

#rows_data = movie_dataset["Genre"].iloc[0].split(",")
#rows_data

row_data = movie_dataset["Genre"]

split_values = []
for value in row_data:
    split_values.extend(value.split(","))
split_values

#Finding the number of genres

#list1 = split_values
#list1 = list(dict.fromkeys(list1))
#print(list1)

split_values = dict.fromkeys(split_values)
print("There are",len(split_values), "genres in the dataset")
split_values

#Now the problem is to have each movie fall in one genres where there are more than one.

print("The highest movie rating is ", movie_dataset['Rating'].max(),"\n""\n")
print("The average revenue of all the movies is", movie_dataset['Revenue (Millions)'].mean(),"\n""\n")
#print("The movies with rating of atleast 8.0 are", len((movie_dataset['Rating']>= 8.0, False)))


#Getting the movie with the highest rating
row_index = movie_dataset[movie_dataset['Rating']==movie_dataset['Rating'].max()].index[0]
print("The movie with the highest rating is",movie_dataset["Title"].iloc[row_index],"\n""\n")

#Getting the movies released in 2015, 2016 & 2017 and their average revenue
#years = (2015, 2016, 2017)

movies_2015_index = movie_dataset[movie_dataset['Year']==2015].index[0:]
movies_2015 = movie_dataset.iloc[movies_2015_index]
#print(movies_2015)
#print("2015 Movies", movies_2015, "\n")

avg_rev_2015 = movies_2015['Revenue (Millions)'].mean()
print("The average revenue for 2015 is ", avg_rev_2015)

movies_2016_index = movie_dataset[movie_dataset['Year']==2016].index[0:]
movies_2016 = movie_dataset.iloc[movies_2016_index]

print("The number of movies released in 2016 are ",len(movies_2016), "\n")
#print("2016 Movies", movies_2016, "\n")

avg_rev_2016 = movies_2016['Revenue (Millions)'].mean()
print("The average revenue for 2016 is ", avg_rev_2016)

ave = (avg_rev_2015 + avg_rev_2016)/2
print("Average revenue between the years 2015 and 2017 is ",ave)

movies_2017_index = movie_dataset[movie_dataset['Year']==2017].index[0:]
movies_2017 = movie_dataset.iloc[movies_2017_index]
#print(movies_2017)
#print("2017 Movies", movies_2017, "\n")

avg_rev_2017 = movies_2017['Revenue (Millions)'].mean()
print("The average revenue for 2017 is ", avg_rev_2017)

movies_by_christopher_index = movie_dataset[movie_dataset['Director']=="Christopher Nolan"].index[0:]
movies_by_christopher = movie_dataset.iloc[movies_by_christopher_index]

#print(movies_by_christopher)
print(len(movies_by_christopher_index))
print("The median rating of movies directed by Christopher Nolan is ",movies_by_christopher['Rating'].median())

#Separating all the actor's names

row_data = movie_dataset["Actors"]

split_values = []
for name in row_data:
    split_values.extend(name.split(","))
split_values

#Finding the most common actor

row_data = movie_dataset["Actors"]

split_values = []
for name in row_data:
    split_values.extend(name.split(","))
split_values

'''
split_actors = {}
for name in split_values:
    split_actors[name] += 1
split_actors
'''

split_actors = {}
for name in split_values:
  if name in split_actors:
    split_actors[name] += 1
  else:
    split_actors[name] = 1

duplicates = {name: count for name, count in split_actors.items() if count >= 10}
duplicates

#The year with the highest average rating

title = pd.DataFrame(movie_dataset['Title'])
rating = pd.DataFrame(movie_dataset['Rating'])
year = pd.DataFrame(movie_dataset['Year'])

df = pd.concat([title, rating, year], axis = 1)
df

# prompt: find the year with the highest average rating

import pandas as pd

# Calculate the average rating for each year
average_ratings = df.groupby('Year')['Rating'].mean()

# Find the year with the highest average rating
highest_rated_year = average_ratings.idxmax()

# Print the year and its average rating
print(f"Year with the highest average rating: {highest_rated_year}")
print(f"Average rating: {average_ratings[highest_rated_year]}")

# What is the percentage increase in the number of movies made between 2006 and 2016

movies_2006_index = movie_dataset[movie_dataset['Year']==2006].index[0:]
movies_2006 = movie_dataset.iloc[movies_2006_index]

movies_2016_index = movie_dataset[movie_dataset['Year']==2016].index[0:]
movies_2016 = movie_dataset.iloc[movies_2016_index]

percent_increase = ((len(movies_2016) - len(movies_2006)) / len(movies_2006)) * 100

print("The percentage increase in the number of movies made between 2006 and 2016 is:", percent_increase, "%")

# prompt: what is the percentage increase in the number of movies made between 2006 and 2016

movies_2006 = len(movie_dataset[movie_dataset['Year'] == 2006])
movies_2016 = len(movie_dataset[movie_dataset['Year'] == 2016])

percentage_increase = ((movies_2016 - movies_2006) / movies_2006) * 100

print(f"Percentage increase in the number of movies made between 2006 and 2016: {percentage_increase:.2f}%")

# #Finding how many movies in the dataset have a rating of atleast 8.0

# movies_with_high_ratings = movie_dataset[movie_dataset['Rating'] >= 8.0]
# number_of_movies = len(movies_with_high_ratings)

# print(f"Number of movies with a rating of at least 8.0: {number_of_movies}")

#Finding how many movies have a rating of atleast 8.0

row_data = movie_dataset[movie_dataset["Rating"]>= 8.0]
print("Number of movies with a rating of at least 8.0:", len(row_data ))